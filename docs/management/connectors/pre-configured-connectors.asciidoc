[[pre-configured-connectors]]
== Preconfigured connectors

If you are running {kib} on-prem, you can preconfigure a connector to have all
the information it needs prior to startup by adding it to the `kibana.yml` file.

NOTE: {ess} provides a preconfigured email connector but you cannot create
additional preconfigured connectors.

Preconfigured connectors offer the following benefits:

- Require no setup. Configuration and credentials needed to run an action are
predefined, including the connector name and ID.
- Appear in all spaces because they are not saved objects.
- Cannot be edited or deleted.

[float]
[[create-preconfigured-connectors]]
=== Create preconfigured connectors

Add `xpack.actions.preconfigured` settings to your `kibana.yml` file. The
settings vary depending on which type of connector you're adding.

This example shows a valid configuration for a Slack connector and a Webhook
connector:

```js
  xpack.actions.preconfigured:
    my-slack1:                  <1>
      actionTypeId: .slack      <2>
      name: 'Slack #xyz'        <3>
      secrets:
        webhookUrl: 'https://hooks.slack.com/services/abcd/efgh/ijklmnopqrstuvwxyz'
    webhook-service:
      actionTypeId: .webhook
      name: 'Email service'
      config:                   <4>
        url: 'https://email-alert-service.elastic.co'
        method: post
        headers:
          header1: value1
          header2: value2
      secrets:                  <5>
        user: elastic
        password: changeme
```

<1>  The key is the connector identifier, `my-slack1` in this example.
<2> `actionTypeId` is the action type identifier.
<3> `name` is the name of the preconfigured connector.
<4> `config` is the configuration specific to the connector type.
<5> `secrets` is the sensitive configuration, such as username, password, and keys, specific to the connector type.

[NOTE]
==============================================
Sensitive properties, such as passwords, can also be stored in the 
<<creating-keystore,{kib} keystore>>.
==============================================

[float]
[[build-in-preconfigured-connectors]]
=== Built-in preconfigured connectors

{kib} provides the following built-in preconfigured connectors:

* <<preconfigured-connector-alert-history,Alert history preconfigured {es} index connector>>
* <<elasticcloud,`Elastic-Cloud-SMTP` preconfigured email connector>>

[float]
[[preconfigured-email-configuration]]
=== Email connector example

To preconfigure an <<email-action-type,email connector>>, use the following settings in your `kibana.yml` file:

[source,text]
--
xpack.actions.preconfigured:
  my-email:
    name: preconfigured-email-connector-type
    actionTypeId: .email
    config:
      service: other <1>
      from: testsender@test.com <2>
      host: validhostname <3>
      port: 8080 <4>
      secure: false <5>
    secrets:
      user: testuser <6>
      password: passwordkeystorevalue <7>
--

<1> The name of the email service. If `service` is `elastic_cloud` (for Elastic 
Cloud notifications) or one of Nodemailer's well-known email service providers,
the `host`, `port`, and `secure` properties are ignored. If `service` is `other`,  
the `host` and `port` properties must be defined. If `service` is `exchange_server`, the `tenantId`, `clientId`, `clientSecret` 
properties are required instead of `host` and `port`.
<2> An email address that corresponds to *Sender*.
<3> A string that corresponds to *Host*.
<4> A number that corresponds to *Port*.
<5> A boolean that corresponds to *Secure*.
<6> A string that corresponds to *Username*. Required if `hasAuth` is set to `true`, which is the default.
<7> A string that corresponds to *Password*. Should be stored in the 
<<creating-keystore,{kib} keystore>>. Required if `hasAuth` is set to `true`, which is the default.

////
[float]
[[preconfigured-cases-webhook-configuration]]
=== {webhook-cm} connector example

To preconfigure an {webhook-cm} connector, use the following settings in your `kibana.yml` file:

[source,text]
--
xpack.actions.preconfigured:
  my-case-management-webhook:
    name: Case Management Webhook Connector
    actionTypeId: .cases-webhook
    config:
      hasAuth: true
      headers:
        'content-type': 'application/json'
      createIncidentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue'
      createIncidentMethod: 'post'
      createIncidentJson: '{"fields":{"summary":{{{case.title}}},"description":{{{case.description}}},"labels":{{{case.tags}}}'
      getIncidentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}'
      getIncidentResponseExternalTitleKey: 'key'
      viewIncidentUrl: 'https://testing-jira.atlassian.net/browse/{{{external.system.title}}}'
      updateIncidentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}'
      updateIncidentMethod: 'put'
      updateIncidentJson: '{"fields":{"summary":{{{case.title}}},"description":{{{case.description}}},"labels":{{{case.tags}}}'
      createCommentMethod: 'post',
      createCommentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}/comment',
      createCommentJson: '{"body": {{{case.comment}}}}',
    secrets:
      user: testuser
      password: passwordvalue
--

`config`:: Defines information for the connector type.
`hasAuth`::: A boolean that corresponds to *Requires authentication*. If `true`, this connector will require values for `user` and `password` inside the secrets configuration. Defaults to `true`.
`headers`::: A `record<string, string>` that corresponds to *Headers*.
`createIncidentUrl`::: A URL string that corresponds to *Create Case URL*.
`createIncidentMethod`::: A string that corresponds to *Create Case Method*.
`createIncidentJson`::: A stringified JSON with Mustache variables that corresponds to *Create Case JSON*.
`createIncidentResponseKey`::: A string from the response body of the create case method that corresponds to the *External Service Id*.
`getIncidentUrl`::: A URL string with an *External Service Id* Mustache variable that corresponds to *Get Case URL*.
`getIncidentResponseExternalTitleKey`::: A string from the response body of the get case method that corresponds to the *External Service Title*.
`viewIncidentUrl`::: A URL string with either the *External Service Id* or *External Service Title* Mustache variable that corresponds to *View Case URL*.
`updateIncidentUrl`::: A URL string that corresponds to *Update Case URL*.
`updateIncidentMethod`::: A string that corresponds to *Update Case Method*.
`updateIncidentJson`::: A stringified JSON with Mustache variables that corresponds to *Update Case JSON*.
`createCommentUrl`::: A URL string that corresponds to *Create Comment URL*.
`createCommentMethod`::: A string that corresponds to *Create Comment Method*.
`createCommentJson`::: A stringified JSON with Mustache variables that corresponds to *Create Comment JSON*.

`secrets`:: Defines sensitive information for the connector type.
`user`::: A string that corresponds to *User*. Required if `hasAuth` is set to `true`.
`password`::: A string that corresponds to *Password*. Required if `hasAuth` is set to `true`.
////
[float]
[[managing-pre-configured-connectors]]
=== View preconfigured connectors

When you open the main menu, click *{stack-manage-app} > {connectors-ui}*. 
Preconfigured connectors appear regardless of which space you are 
in. They are tagged as “preconfigured”, and you cannot delete them.

[role="screenshot"]
image::images/preconfigured-connectors-managing.png[Connectors managing tab with pre-configured]

Clicking a preconfigured connector shows the description, but not the 
configuration.

